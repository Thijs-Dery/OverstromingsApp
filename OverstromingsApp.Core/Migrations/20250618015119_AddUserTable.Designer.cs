// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OverstromingsApp.Core;

#nullable disable

namespace OverstromingsApp.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250618015119_AddUserTable")]
    partial class AddUserTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OverstromingsApp.Core.Models.DataModel", b =>
                {
                    b.Property<int>("Jaar")
                        .HasColumnType("int");

                    b.Property<int>("Maand")
                        .HasColumnType("int");

                    b.Property<int>("NeerslagMM")
                        .HasColumnType("int");

                    b.HasKey("Jaar", "Maand");

                    b.ToTable("Neerslag");
                });

            modelBuilder.Entity("OverstromingsApp.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedUtc = new DateTime(2025, 6, 18, 1, 51, 19, 431, DateTimeKind.Utc).AddTicks(6080),
                            Email = "admin@example.com",
                            PasswordHash = new byte[] { 81, 175, 43, 154, 99, 248, 161, 137, 141, 131, 166, 10, 253, 125, 7, 165, 221, 161, 107, 79, 10, 142, 175, 128, 245, 242, 128, 88, 135, 250, 121, 85 },
                            PasswordSalt = new byte[] { 132, 78, 229, 227, 21, 61, 90, 82, 37, 108, 210, 148, 61, 19, 225, 146 }
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
